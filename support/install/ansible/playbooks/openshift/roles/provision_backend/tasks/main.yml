---
- name: Make sure we go back to default project
  shell: "oc project default"

- name: Check if Fuse 7.1 image streams are available
  shell: "oc describe is fuse7-java-openshift -n openshift"
  register: imagestream_exists
  when: configure_only == 'false'
  ignore_errors: true

- name: Create image streams for Fuse 7.1
  shell: "oc create -f https://raw.githubusercontent.com/jboss-fuse/application-templates/application-templates-2.1.fuse-711004/fis-image-streams.json -n openshift"
  when: configure_only == 'false' and imagestream_exists.failed
  ignore_errors: true

- name: Create or Update template for Fuse 7.1
  shell: "oc apply -f https://raw.githubusercontent.com/RedHatWorkshops/dayinthelife-integration/master/support/templates/spring-boot-camel-template.json -n openshift"
  when: configure_only == 'false'
  ignore_errors: true

- name: Check if Fuse 7.1 SSO template is available
  shell: "oc describe template s2i-fuse71-spring-boot-camel-integr8ly-sso -n {{ backend_project }}"
  register: sso_template_exists
  when: configure_only == 'false'
  ignore_errors: true

- name: Create template for Integr8ly SSO Fuse 7.1
  shell: "oc create -f https://raw.githubusercontent.com/RedHatWorkshops/dayinthelife-integration/master/support/templates/spring-boot-camel-template-SSO-integr8ly.json -n openshift"
  when: configure_only == 'false' and sso_template_exists.failed
  ignore_errors: true

- name: Create Backend Database
  shell: "oc new-app -f https://raw.githubusercontent.com/openshift/origin/master/examples/db-templates/postgresql-ephemeral-template.json \
  --param=POSTGRESQL_USER=dbuser --param=POSTGRESQL_PASSWORD=password --param=POSTGRESQL_DATABASE=sampledb --param=POSTGRESQL_VERSION=latest -n {{ backend_project }}"
  when: configure_only == 'false'
  register: create_backend_db
  failed_when: create_backend_db.stderr != '' and 'already exists' not in create_backend_db.stderr

- name: Create Backend Location API service
  shell: "oc new-app s2i-fuse71-spring-boot-camel -p GIT_REPO=https://github.com/sigreen/dayinthelife-integration \
  -p CONTEXT_DIR=/projects/location-service -p APP_NAME=location-service -p GIT_REF=v2-boston -n {{ backend_project }}"
  when: configure_only == 'false'
  register: create_location_api_service
  failed_when: create_location_api_service.stderr != '' and 'already exists' not in create_location_api_service.stderr

- name: Create Backend Location Detail SOAP service
  shell: "oc new-app s2i-fuse71-spring-boot-camel -p GIT_REPO=https://github.com/sigreen/dayinthelife-integration \
  -p CONTEXT_DIR=/projects/location-soap -p APP_NAME=location-soap -p GIT_REF=v2-boston -n {{ backend_project }}"
  when: configure_only == 'false'
  register: create_location_detail_soap_service
  failed_when: create_location_detail_soap_service.stderr != '' and 'already exists' not in create_location_detail_soap_service.stderr

- name: Create Backend Location Detail SOAP to REST service
  shell: "oc new-app s2i-fuse71-spring-boot-camel -p GIT_REPO=https://github.com/sigreen/dayinthelife-integration \
  -p CONTEXT_DIR=/projects/location-soap2rest -p APP_NAME=location-soap2rest -p GIT_REF=v2-boston -n {{ backend_project }}"
  when: configure_only == 'false'
  register: create_location_soap_rest_service
  failed_when: create_location_soap_rest_service.stderr != '' and 'already exists' not in create_location_soap_rest_service.stderr

- name: Make sure go to sso project
  shell: "oc project sso"

## oc describe dc/sso | grep SSO_ADMIN_PASSWORD | sed 's/.*://g' | sed -e 's/^[[:space:]]*//'
- name: A workaround for integr8ly, as it does not support fix SSO password nor in ConfigMap SSO UserName
  shell: "oc get dc/sso -o json"
  register: sso_text
  when: configure_only == 'false'

- set_fact: sso_username={{ (sso_text.stdout | from_json | json_query(query)) | first }}
  vars:
    query: "spec.template.spec.containers[0].env[?name=='SSO_ADMIN_USERNAME'].value"

- set_fact: sso_pwd={{ (sso_text.stdout | from_json | json_query(query)) | first }}
  vars:
    query: "spec.template.spec.containers[0].env[?name=='SSO_ADMIN_PASSWORD'].value"

- debug:
    msg: "sso_username {{ sso_username }} has sso_pwd {{ sso_pwd }}"

- name: Make sure we go back to default project
  shell: "oc project default"

- name: Create ThreeScale Automate service
  shell: "oc new-app s2i-fuse71-spring-boot-camel-integr8ly-sso -p GIT_REPO=https://github.com/sigreen/dayinthelife-integration \
  -p CONTEXT_DIR=/projects/threescale-automate -p APP_NAME=threescale-automate -p GIT_REF=v2-boston -p SSO_USERNAME={{ sso_username }} -p SSO_PASSWORD={{ sso_pwd }} -n {{ backend_project }}"
  when: configure_only == 'false'
  register: create_threescale_automate
  failed_when: create_threescale_automate.stderr != '' and 'already exists' not in create_threescale_automate.stderr

- name: Create Webpage application
  shell: "oc new-app https://github.com/jbossdemocentral/3scaleworkshop-wwwpage#secured --name www \
  --build-env API_BACKEND_URL=https://location-sso-staging.amp.{{ ocp_apps_domain }}/locations \
  --build-env SSO_URL=https://sso-{{ sso_project }}.{{ ocp_apps_domain }} --build-env SSO_REALM=threescale \
  --build-env CLIENT_ID=www-secured -n {{ backend_project }}"
  when: configure_only == 'false'
  register: create_webpage_application
  failed_when: create_webpage_application.stderr != '' and 'already exists' not in create_webpage_application.stderr

- name: Create webapp route
  shell: "oc expose svc/www -n {{ backend_project }}"
  when: configure_only == 'false'
  register: create_webapp_route
  failed_when: create_webapp_route.stderr != '' and 'already exists' not in create_webapp_route.stderr
